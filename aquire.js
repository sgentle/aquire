// Generated by CoffeeScript 1.9.1
(function() {
  var MODULE_DIR, aquire, fin, install, load, localRequire, makePath, nodeify, npm, npmModule, path, remoteRequire, simplify, withNoConsoleLog,
    slice = [].slice;

  npmModule = require('npm');

  path = require('path');

  MODULE_DIR = 'aquire_modules';

  nodeify = function(o, k) {
    return function() {
      var args, x;
      args = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = arguments.length; i < len; i++) {
          x = arguments[i];
          results.push(x);
        }
        return results;
      }).apply(this, arguments);
      return new Promise((function(_this) {
        return function(resolve, reject) {
          args.push(function(err, result) {
            if (err) {
              return reject(err);
            } else {
              return resolve(result);
            }
          });
          return o[k].apply(o, args);
        };
      })(this));
    };
  };

  fin = function(p, f) {
    p["catch"](function(e) {
      f();
      throw e;
    });
    return p.then(function(x) {
      f();
      return x;
    });
  };

  withNoConsoleLog = function(p) {
    var oldlog, ref;
    ref = [console.log, function() {}], oldlog = ref[0], console.log = ref[1];
    return fin(p, function() {
      return console.log = oldlog;
    });
  };

  load = nodeify(npmModule, 'load');

  install = nodeify(npmModule.commands, 'install');

  npm = load({
    prefix: MODULE_DIR,
    loglevel: 'silent',
    silent: true,
    production: true
  });

  makePath = function(name) {
    return path.resolve(MODULE_DIR, 'node_modules', name.split('@')[0]);
  };

  localRequire = function(names) {
    var i, len, name, results;
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      results.push(require(makePath(name)));
    }
    return results;
  };

  remoteRequire = function(names) {
    return npm.then(function() {
      return withNoConsoleLog(install(names));
    }).then(function() {
      return localRequire(names);
    });
  };

  simplify = function(modules) {
    if (modules.length === 1) {
      return modules[0];
    } else {
      return modules;
    }
  };

  aquire = function() {
    var names;
    names = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return Promise.resolve().then(function() {
      return localRequire(names);
    })["catch"](function() {
      return remoteRequire(names);
    }).then(simplify);
  };

  module.exports = aquire;

}).call(this);
